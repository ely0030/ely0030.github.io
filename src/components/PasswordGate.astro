---
/**
 * PasswordGate component
 * Props:
 *  - hash: SHA256 hex string to match
 */
const { hash } = Astro.props;
---
{!hash && (<slot />)}
{hash && (
  <>
    <div class="protected-content">
      <div class="centered-form">
        <form class="pw-form" data-hash={hash}>
          <input type="password" id="password" name="pw" placeholder="Password" required autocomplete="off" />
          <div class="form-actions">
            <a href="/" class="back-link" aria-label="Back to home" title="Back to home">
              <svg class="icon" width="16" height="16" viewBox="0 0 24 24" aria-hidden="true" focusable="false">
                <path fill="currentColor" d="M15 4.5a1 1 0 0 0-1.64-.77L6.68 10a1 1 0 0 0 0 1.5l6.68 6.27a1 1 0 0 0 1.64-.77V13h5a1 1 0 1 0 0-2h-5V4.5Z"/>
              </svg>
              <span class="back-text">back</span>
            </a>
          </div>
        </form>
        <p class="error-message" hidden>Incorrect password</p>
      </div>
    </div>
    <script type="module" client:load>
      // Position password prompt at the same Y offset as index title
      {
        const params = new URLSearchParams(location.search);
        const yParam = params.get('pwYOffset');
        const yOffset = yParam ? parseInt(yParam, 10) : NaN;
        if (!isNaN(yOffset)) {
          const container = document.querySelector('.protected-content');
          if (container) {
            // Don't override the centering styles
            container.style.paddingTop = yOffset + 'px';
          }
        }
      }
      import { sha256 } from 'https://cdn.jsdelivr.net/npm/js-sha256@0.9.0/+esm';
      const form = document.querySelector('.pw-form');
      const KEY = 'pw:' + location.pathname;
      const SAVED = localStorage.getItem(KEY);
      const HASH = form.dataset.hash;
      if (HASH && SAVED === HASH) reveal();
      form?.addEventListener('submit', async (e) => {
        e.preventDefault();
        const data = new FormData(form);
        const pw = data.get('pw');
        if (!pw) return;
        const digest = sha256(pw);
        if (digest === HASH) {
          localStorage.setItem(KEY, HASH);
          reveal();
        } else {
          document.querySelector('.error-message').removeAttribute('hidden');
          form.elements.pw.value = '';
          form.elements.pw.focus();
        }
      });
      function reveal() {
        document.querySelector('.protected-content')?.remove();
        const protectedEl = document.getElementById('protected');
        protectedEl?.removeAttribute('hidden');
        window.scrollTo(0, 0);
      }
    </script>
    <div id="protected" hidden>
      <slot />
    </div>
    <style>
      /* Additional styles specific to this component */
      .back-link .icon { 
        vertical-align: middle; 
      }
      .back-text {
        font-size: 0.7em;
        font-weight: normal;
      }
      .form-actions {
        display: flex;
        justify-content: center;
        margin-top: 0.4em;
      }
    </style>
  </>
)}
